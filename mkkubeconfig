#!/bin/bash -e

# Check input
if [ -z "${1}" ] || [ -z "${2}" ]; then
    echo "Usage: mkkubeconfig <namespace> <service-account>" 1>&2
    exit 1
fi

# Allocate temp directory
TEMPDIR=$( mktemp -d )

# shellcheck disable=SC2064
trap "{ rm -rf '${TEMPDIR}' ; exit 255; }" EXIT

# Get name of serviceaccount secret
SA_SECRET=$( kubectl get serviceaccount -n "${1}" "${2}" -o jsonpath='{.secrets[0].name}' )

# Pull the bearer token and cluster CA from the service account secret.
BEARER_TOKEN=$( kubectl get secrets -n "${1}" "${SA_SECRET}" -o jsonpath='{.data.token}' | base64 -d )
kubectl get secrets -n "${1}" "${SA_SECRET}" -o jsonpath='{.data.ca\.crt}' | base64 -d > "${TEMPDIR}/ca.crt"

# Get cluster URL
CLUSTER_URL=$( kubectl config view -o jsonpath='{.clusters[0].cluster.server}' )

# Generate kubeconfig file
KUBECONFIG="${TEMPDIR}/kubeconfig.yaml"

1>&2 kubectl config --kubeconfig="${KUBECONFIG}" \
    set-cluster \
    "${CLUSTER_URL}" \
    --server="${CLUSTER_URL}" \
    --certificate-authority="${TEMPDIR}/ca.crt" \
    --embed-certs=true

1>&2 kubectl config --kubeconfig="${KUBECONFIG}" \
    set-credentials "${2}" --token="${BEARER_TOKEN}"

1>&2 kubectl config --kubeconfig="${KUBECONFIG}" \
    set-context "${2}" \
    --cluster="${CLUSTER_URL}" \
    --namespace="${1}" \
    --user="${2}"

1>&2 kubectl config --kubeconfig="${KUBECONFIG}" \
    use-context "${2}"

cat "${KUBECONFIG}"
